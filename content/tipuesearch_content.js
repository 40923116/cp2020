var tipuesearch = {"pages": [{'title': '組員', 'text': 'Repository:\xa0 40923113 \xa0 | Site: \xa0 40923113 Repository: \xa0 40923114 \xa0 | Site: \xa0 40923114 Repository: \xa0 40923116 \xa0 | Site: \xa0 40923116 \xa0 (組長) Repository: \xa0 40923121 \xa0 | Site: \xa0 40923121 Repository: \xa0 40923129 \xa0 | Site: \xa0 40923129 Repository: \xa0 40923137 \xa0 | Site: \xa0 40923137 Repository: \xa0 40923140 \xa0 | Site: \xa0 40923140 Repository: \xa0 40923146 \xa0 | Site: \xa0 40923146 Repository: \xa0 40923147 \xa0 | Site: \xa0 40923147', 'tags': '', 'url': '組員.html'}, {'title': 'About', 'text': '\n 這個倉儲位於\xa0 https://github.com/mdecourse/cmstemplate \xa0是一個能夠與 Github Pages, Gitlab Pages 以及 Heroku 結合的網際內容管理系統. \n 第四組\xa0https://[2001:288:6004:17:b964:80e0:d650:829f]:9443/ \n', 'tags': '', 'url': 'About.html'}, {'title': 'Hint', 'text': '\n 是否了解如何設定 Github Pages? \n 是否了解如何設定 Gitlab Pages? \n 是否了解如何設定 Heroku? \n \n 作業一的目的: \n \n 閱讀與電腦軟硬體相關的英文資料, 藉以了解英文相關術語 \n 了解電腦與網路相關設定 \n 了解如何使用 Git, Github 與 CMSiMDE \n \n 作業二的目的: \n \n 實際了解 Python 程式在課程推動上的應用 \n 了解如何從網站超文件資料中擷取所要的資料 \n 使用 Kaggle 與近端 SciTE 開發 Python 程式 \n \n 作業三的目的: \n \n 著手利用 Python 解決各類問題 \n 利用 Python 修改 Solidworks 與 Inventor 零件尺寸 \n \n', 'tags': '', 'url': 'Hint.html'}, {'title': 'gitlab-ci.yml', 'text': '標題不能使用 .gitlab-ci.yml 因為轉為 content/.gitlab-ci.yml 時, 無法從 content/.github-ci.yml 呼叫. \n .gitlab-ci.yml 是在 Gitlab Pages 設定過程中將靜態網頁轉存並伺服的 continuout integration 設定檔案. \n pages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive \n', 'tags': '', 'url': 'gitlab-ci.yml.html'}, {'title': 'CMSiMDE', 'text': '網際內容管理系統 \n Web-based Content Management System \n https://learnmech.com/ \n https://www.instructables.com/ \xa0\xa0 \n https://imechanica.org/ \xa0 \n https://info.traceparts.com/use-and-manage-3d-cad-models/download-free-cad-models/ \xa0 \n https://bookboon.com/en \xa0 \n \n', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': 'CMSiMDE 程式架構', 'text': '動態網頁的主要檔案為 config/content.htm \n 當使用者在命令列中將目錄更換到 cmsimde, 然後以 python wsgi.py 執行 wsgi.py 程式時, 其實 Python 程式是仰賴 Flask 網際框架結構來進行資料伺服. \n CMSiMDE 的作動需要 Flask 網際框架, 需要 bs4 與 lxml 進行 content.htm 的頁面解讀, 透過超文件檔案中的 h1, h2 與 h3 由上到下執行循序式分頁, 之後再透過 Javascript 與 css 將 h1, h2, h3 依照樹狀結構, h1 標題為第一階, h2 為第二階, h3 為第三階. \n', 'tags': '', 'url': 'CMSiMDE 程式架構.html'}, {'title': '為何需要網際內容管理', 'text': '全球資訊網無遠弗屆, 而且 WWW 的伺服架構相對於手機 APP 對於使用者而言更加友善, 除了允許多重身分無需實名綁定之外, 可以讓工程師進行各種協同設計, 因此若能廣泛利用網際環境建立各種應用程式環境, 將有助提升設計效益. \n', 'tags': '', 'url': '為何需要網際內容管理.html'}, {'title': '如何建立 CMSiMDE 子模組', 'text': 'git submodule add  https://github.com/mdecourse/cmsimde.git \xa0cmsimde \n 表示要透過 git submodule add 將  https://github.com/mdecourse/cmsimde.git \xa0遠端倉儲當作子模組, 而且將資料存入子目錄 cmsimde 中. \n', 'tags': '', 'url': '如何建立 CMSiMDE 子模組.html'}, {'title': '為何需要以子模組的設計', 'text': '在一個倉儲中帶有子模組的用意是善用分散式設計的做法, 子模組代表一個非由倉儲管理者維護權限所及的單位模組. 意即, 倉儲中程式的執行需要子模組中的資料, 但是倉儲擁有者將子模組視為獨立元件, 並不需要對子模組的內容進行改版. 一旦子模組原始倉儲資料更新, 採用子模組的各倉儲所有者可以決定是否配合跟進, 若不跟進仍有使用既有版本的子模組繼續運作, 原始子模組與採用不同版本子模組的倉儲都不會彼此受到影響. \n', 'tags': '', 'url': '為何需要以子模組的設計.html'}, {'title': '兩種不同的 git clone', 'text': 'git clone  https://github.com/mdecourse/cmsimde.git \n 表示要將 cmsimde 倉儲的資料 clone 到近端, 針對沒有子模組設置的倉儲可以直接以 git clone 取下倉儲資料 \n git clone --recurse-submodules  https://github.com/mdecourse/cp2020.git \n 表示要將 cp2020 倉儲中包含個子模組與可能子模組中的子模組等資料, 全部 clone 到近端. \n', 'tags': '', 'url': '兩種不同的 git clone.html'}, {'title': '假如 CMSiMDE 不設為子模組', 'text': '其實各用戶若希望自行維護 CMSiMDE 網際內容管理系統, 可以直接取下 CMSiMDE 程式資料, 然後將倉儲資料放在 cmsimde 子目錄中, 並將 up_dir 中的資料複製一份到倉儲根目錄, 如此就可以依 CMSiMDE 的用法使用動態與靜態網頁. \n', 'tags': '', 'url': '假如 CMSiMDE 不設為子模組.html'}, {'title': '為何需要有動態網頁與靜態網頁', 'text': '所謂的動態網頁指的是有登入系統配置的網際內容管理系統, 當使用者登入後進行內容管理, 網站會馬上呈現新版本內容, 通常無需進行網頁轉換. \n 所謂的靜態網頁則指網站通常沒有登入系統的配置, 而且通常只包含 html 與 Javascript 資料, 由於沒有登入系統, 因此沒有內容被駭的問題, 除非負責伺服超文件網頁的系統遭駭. \n 而 CMSiMDE 的動態網頁用於編輯網站內容, 而靜態網頁則可以利用 Github Pages, Gitlab Pages 與 Heroku 進行伺服. \n', 'tags': '', 'url': '為何需要有動態網頁與靜態網頁.html'}, {'title': 'CMSiMDE 有甚麼使用上的限制嗎比方說能夠使用那些特殊符號, 為什麼不能使用分號, 以及所謂的標題有沒有最多幾個字元的限制, 另外就是假如標題過長, 會發生甚麼狀況與後果', 'text': '假如在上列頁面標題中加上兩個 "?", 上面這個標題就無法順利分頁, 但是利用 SciTE 編輯 config/content.htm 之後將兩個 "?" 刪除後則可以正確完成分頁. \n 上面的標題字元數超過 80 個, 雖可正常分頁但是在資料展示上就顯得不很方便. \n CMSiMDE 標題不能使用 ":" 的原因在於 Windows 操作系統不允許檔案名稱中有 ":", 因此當 CMSiMDE 動態轉靜態時必須以頁面標題作為該頁的檔案名稱, 而無法完成靜態頁面存檔的問題會讓 CMSiMDE 無法順利將動態資料轉為靜態資料. \n', 'tags': '', 'url': 'CMSiMDE 有甚麼使用上的限制嗎比方說能夠使用那些特殊符號, 為什麼不能使用分號, 以及所謂的標題有沒有最多幾個字元的限制, 另外就是假如標題過長, 會發生甚麼狀況與後果.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'HW2', 'text': '有關作業二 (Due W12 各班上課之前): \n 由於部分學員在建立 Github 帳號時, 無法使用學號登記帳號, 因此造成 \xa0 W3 \xa0 部分分組組員的倉儲與網站連結產生錯誤, 今已知乙班的原始分組數列如下: \n 一乙: \n [[40823148, 40923203, 40923208, 40923209, 40923210, 40923223, 40923225, 40923230, 40923238, 40923239, 40923244, 40923249], [40523148, 40923201, 40923202, 40923218, 40923219, 40923228, 40923231, 40923232, 40923240, 40923247, 40923248, 40923250], [40823152, 40923205, 40923212, 40923214, 40923217, 40923226, 40923236, 40923241, 40923242, 40923246, 40923251], [40723217, 40728238, 40923206, 40923216, 40923220, 40923227, 40923233, 40923237, 40923243, 40923252, 40923253], [40523138, 40923204, 40923207, 40923211, 40923213, 40923221, 40923224, 40923229, 40923234, 40923235, 40923245]] \n 但是一甲的分組數列當時並未能儲存. \n 另外, 從亂數分組頁面可以從 教務處伺服器與 Heroku \xa0 上的網站結合下取得兩班最終修課學員名單: \n 四技設一甲計算機程式學員名單: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0762 \n 四技設一乙計算機程式學員名單: \n https://nfulist.herokuapp.com/?semester=1091&courseno=0776 \n 請各組以協同討論但各自將以下題目的解題流程說明與程式放入個人網頁的方式完成作業二. \n 作業二之一: \n 請問該如何取得與上述一乙相同格式的一甲分組數列? 請詳細說明解題步驟後列出一甲的分組數列. \n 作業二之二: \n 請問根據上述原始分組資料與最終教務處的選課學員名單, 兩班課程中是否有人加選或者退選? 請說明解題方法與結果. \n 作業二之三: \n 從倉儲 \xa0 downloads/hw2 \xa0 目錄中可以找到兩班各學員實際登記 Github 的帳號資料, 例如: \xa0 一乙學號與 Github 帳號對照表 , 請問該如何利用程式方法產生正確的\xa0 W3 \xa0網頁 html 資料? \n \n 參考資料: \n 變數:\xa0 https://books.trinket.io/pfe/02-variables.html \xa0 \n 條件式:\xa0 https://books.trinket.io/pfe/03-conditional.html \xa0 \n 重複迴圈: \xa0 https://books.trinket.io/pfe/05-iterations.html \xa0 \n 數列:\xa0 https://books.trinket.io/pfe/08-lists.html \xa0 \n 開啟檔案: \xa0 https://books.trinket.io/pfe/07-files.html\xa0 \n 超文件:\xa0 https://www.w3schools.com/html/ \xa0 \n bs4:\xa0 https://readthedocs.org/projects/beautiful-soup-4/downloads/pdf/latest/ \xa0 \n 解題參考: \xa0 https://www.kaggle.com/mdecourse/cp2020-hw2 \xa0', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '', 'tags': '', 'url': 'HW3.html'}, {'title': '10 List Overlap Comprehensions', 'text': 'Exercise 10 (and Solution) \n This week’s exercise is going to be revisiting an old exercise (see \xa0 Exercise 5 ), except require the solution in a different way. \n Take two lists, say for example these two: \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this \xa0 in one line of Python \xa0 using at least one list comprehension . ( Hint: Remember \xa0 list comprehensions \xa0 from Exercise 7 ). \n The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using \xa0 set s that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the \xa0 set \xa0 command in Python 3.3 , or try to implement this on your own and use at least one list comprehension in the solution. \n Extra: \n \n Randomly generate two lists to test this \n \n Discussion \n Concepts for this week: \n \n List comprehensions \n Random numbers, continued \n \n List comprehensions \n We already discussed list comprehensions in \xa0 Exercise 7 , but they can be made much more complicated. \n For example: \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t allproducts   =   [ a * b   for   a   in   x   for   b   in   y ] \n \n At the end of this piece of code, \xa0 allproducts \xa0 will contain the list \xa0 [5, 10, 15, 10, 20, 30, 15, 30, 45] . So you can put multiple for loops inside the comprehension. But you can also add more complicated conditionals: \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t customlist   =   [ a * b   for   a   in   x   for   b   in   y   if   a * b % 2   !=   0 ] \n \n Now \xa0 customlist \xa0 contains \xa0 [5, 15, 15, 45] \xa0 because only the odd products are added to the list. \n In general, the list comprehension takes the form: \n \n \t [ EXPRESSION   FOR_LOOPS   CONDITIONALS ] \n \n as shown in the examples above. \n Random numbers, continued \n Try to use the \xa0 Python random documentation \xa0 to figure out how to generate a random list. As a hint look below: \n \n \t a   =   random . sample ( range ( 100 ),   5 ) \n \n This line of code will leave \xa0 a \xa0 containing a list of 5 random numbers from 0 to 99. \n Happy coding! \n Forgot how to \xa0 submit exercises ? \n \n 練習10（和解決方案） 本週的練習將重溫舊的練習（請參閱練習5），但需要以其他方式解決。 \n 拿兩個列表，舉例來說，這兩個： \n a = [1、2、3、5、8、13、21、34、55、89] b = [1、2、3、4、5、6、7、8、9、10、11、12、13] 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。確保您的程序可以在兩個不同大小的列表上運行。至少使用一個列表理解功能，用一行Python編寫此代碼。 （提示：請記住練習7中的列表理解）。 \n 此練習的原始表述是使用一行Python編寫解決方案，但是一些讀者指出，如果不使用我在博客上尚未討論過的集，這是不可能做到的，因此您可以選擇使用原始指令，並了解Python 3.3中的set命令，或者嘗試自己實現該指令並在解決方案中至少使用一個列表理解。 \n 額外： \n 隨機生成兩個列表進行測試 討論區 本週的概念： \n 清單理解 隨機數，續 清單理解 我們已經在練習7中討論了列表理解，但是可以使它們複雜得多。 \n 例如： \n x = [1、2、3] y = [5，10，15] allproducts = [a * b for a in x for b in y] 在這段代碼的最後，所有產品都將包含列表[5、10、15、10、20、30、15、30、45]。因此，您可以在理解中放入多個for循環。但是您還可以添加更複雜的條件： \n x = [1、2、3] y = [5，10，15] customlist = [如果a * b％2！= 0，則x為a的b為y的a * b] 現在，customlist包含[5、15、15、45]，因為只有奇數產品被添加到列表中。 \n 通常，列表理解採用以下形式： \n [EXPRESSION FOR_LOOPS條件] 如以上示例所示。 \n 隨機數，續 嘗試使用Python隨機文檔來弄清楚如何生成隨機列表。提示如下： \n 一個= random.sample（range（100），5） 這行代碼將保留一個包含從0到99的5個隨機數的列表。 \n 祝您編碼愉快！ 忘記瞭如何提交練習？ \n', 'tags': '', 'url': '10 List Overlap Comprehensions.html'}, {'title': '11 Check Primality Functions', 'text': 'Exercise 11 (and Solution) \n Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to\xa0 Exercise 4 \xa0 to help you. Take this opportunity to practice using functions, described below. \n Discussion \n Concepts for this week: \n \n Functions \n Reusable functions \n Default arguments \n \n Functions \n One of the tools programming gives us is the ability to break down problems into easier (or perhaps previously solved) or reusable subproblems. It is good practice to have a function have a single purpose, and the name of that function should hint at it’s purpose in some way. \n Most programming languages have this idea of a function, subroutine, or subprogram. In Python, a function is a programming construct that allows exactly that. \n Let’s look at a simple example: \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n \n In this small example, we used the same code that asks a user for input as a tabbed line underneath this \xa0 def \xa0 statement. The \xa0 def \xa0 means that everything tabbed underneath is a function. The name \xa0 get_integer() \xa0 is just a name that I (the programmer) made up. If I just include this code inside a Python file and run it, nothing will happen - all I have done so far is wrapped my code inside of a function; I never told my program to actually RUN my function. \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n\n   age   =   get_integer () \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n What I have done here is \xa0 called \xa0 the function (told it to run) by writing \xa0 age = get_integer() . When this line of code runs, what happens is the program will \xa0 execute \xa0 (run) the function by asking me for a number, then \xa0 returning \xa0 it (giving it back to me) by saving it inside the variable \xa0 age . Now when I want to ask the user for another number (this time representing the school year), I do the same thing with the variable \xa0 school_year . \n Reusable functions \n This is all well and good, but I can make my function do much more for me. Right now, my function will always ask the user for a number by printing the string \xa0 "Give me a number: " . What if I want to print a different string every time I ask the user for a number, but otherwise use the same idea for the function? In other words, I want a variable parameter in my function that changes every time I call the function based on something I (the programmer) want to be different. \n I can do this by \xa0 passing \xa0 (giving) my function a variable. Like this: \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n \n Now what I can do when I call the function is something like this: \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n\n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer ( "What grade are you in? " ) \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n Now it is easier for a user to use the program, because the help text is different. \n These variables you pass to functions are called \xa0 variables , \xa0 parameters , or \xa0 arguments . \n Default arguments \n In the example above, once I have added an \xa0 argument \xa0 to my function, I always have to give an argument when I call the function. I can’t forget to give the \xa0 get_integer() \xa0 function from above a string to print to the screen. In some cases, I want there to be a “default” behavior for my function that happens when I create an argument for it but don’t give it any. \n In the example above, if I don’t give a custom string (which may be 95% of the time I use this function), I just want the \xa0 input() \xa0 line to say \xa0 "Give me a number: " \xa0 and I want to save myself the trouble of writing this every single time I call the function. So what I can do is give my function \xa0 default arguments . Like so: \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n \n What happens now is I can use the function in two ways: by giving it an argument and by NOT giving it an argument. \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n\n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n The first time I call the function, it will print \xa0 "Tell me your age: " , but the second time, it will print \xa0 "Give me a number: " , because I did not give it a string and it will execute the default behavior. \n Recap \n What a function does is wrap a piece of code that we want to reuse, labels it, and allows us to use it again relatively easily. You can add variables to the functions to make your code even MORE reusable, and you can add default arguments to these variables. \n Functions are a bit strange to deal with at first, but once you master them, they will be your savior in programming. Besides, the whole point of learning programming is abstraction, problem solving, breaking down problems, and that’s exactly what functions are all about. \n Happy coding! \n Forgot how to \xa0 submit exercises ? \n \n 練習11（和解決方案） 向用戶詢問一個數字，並確定該數字是否為質數。 （對於那些忘記的人，質數是沒有除數的數。）您可以（並且應該！）使用練習4的答案來幫助您。藉此機會練習使用如下所述的功能。 \n 討論區 本週的概念： \n 職能 可重用功能 默認參數 職能 編程提供給我們的工具之一是能夠將問題分解為更簡單（或可能先前解決）或可重用的子問題。優良作法是讓一個功能具有單一目的，並且該功能的名稱應以某種方式暗示其目的。 \n 大多數編程語言都具有函數，子例程或子程序的概念。在Python中，函數是一種允許這樣做的編程構造。 \n 讓我們看一個簡單的例子： \n def get_integer（）：  return int（input（“給我一個數字：”）） 在這個小示例中，我們使用了相同的代碼，要求用戶在此def語句下方輸入為選項卡行。 def表示位於其下的所有選項卡都是一個函數。名稱get_integer（）只是我（程序員）組成的名稱。如果我只是將此代碼包含在Python文件中並運行它，則將不會發生任何事情-到目前為止，我所做的一切都將我的代碼包裝在一個函數中；我從未告訴過我的程序實際運行我的功能。 \n def get_integer（）：  return int（input（“給我一個數字：”）） \n 年齡= get_integer（）  school_year = get_integer（）  如果年齡> 15：  打印（“您已超過15歲”）  打印（“您正在讀年級” + str（school_year）） 通過寫age = get_integer（），我在這裡所做的被稱為函數（告訴它運行）。當這行代碼運行時，程序將通過詢問我的數字來執行（運行）該函數，然後將其保存在變量age中以將其返回（交還給我）。現在，當我想問用戶另一個數字（這次代表學年）時，我對變量school_year做同樣的事情。 \n 可重用功能 這一切都很好，但是我可以讓我的功能為我做更多的事情。現在，我的函數將始終通過打印字符串“給我一個數字：”來要求用戶輸入數字。如果我想每次問用戶一個數字時都想打印一個不同的字符串，但對於該函數使用相同的想法怎麼辦？換句話說，我希望函數中的變量參數在每次調用函數時都根據我（程序員）希望與眾不同的事物而改變。 \n 我可以通過傳遞（給我的）函數一個變量來做到這一點。像這樣： \n def get_integer（help_text）：  返回int（input（help_text）） 現在，當我調用該函數時，我可以做的是這樣的： \n def get_integer（help_text）：  返回int（input（help_text）） \n age = get_integer（“告訴我您的年齡：”）  school_year = get_integer（“你現在讀什麼年級？”）  如果年齡> 15：  打印（“您已超過15歲”）  打印（“您正在讀年級” + str（school_year）） 現在，由於幫助文本不同，因此使用戶更容易使用該程序。 \n 傳遞給函數的這些變量稱為變量，參數或參數。 \n 默認參數 在上面的示例中，在向函數添加參數後，在調用函數時始終必須提供參數。我不能忘記從字符串上方給get_integer（）函數打印到屏幕上。在某些情況下，我希望函數有一個“默認”行為，這種行為會在我為其創建參數但不提供任何參數時發生。 \n 在上面的示例中，如果我不提供自定義字符串（使用該函數的時間可能是95％），我只想讓input（）行說“給我一個數字：”，而我想節省了我每次調用該函數時編寫此代碼的麻煩。所以我能做的就是給我的函數提供默認參數。像這樣： \n def get_integer（help_text =“給我一個數字：”）：  返回int（input（help_text）） 現在發生的事情是我可以通過兩種方式使用該函數：通過給它一個參數和不給它一個參數。 \n def get_integer（help_text =“給我一個數字：”）：  返回int（input（help_text）） \n age = get_integer（“告訴我您的年齡：”）  school_year = get_integer（）  如果年齡> 15：  打印（“您已超過15歲”）  打印（“您正在讀年級” + str（school_year）） 第一次調用該函數時，它將打印“告訴我您的年齡：”，但是第二次它將顯示“給我一個數字：”，因為我沒有給它提供字符串，它將執行默認行為。 \n 回顧 函數的作用是包裝我們要重用的一段代碼，對其進行標記，並允許我們相對容易地再次使用它。您可以將變量添加到函數中，以使代碼更加可重用，並且可以將默認參數添加到這些變量中。 \n 一開始處理函數有點奇怪，但是一旦掌握了這些函數，它們將成為編程的救星。此外，學習編程的重點是吸引，解決問題，解決問題，而這正是功能所在。 \n 祝您編碼愉快！ 忘記瞭如何提交練習？ \n', 'tags': '', 'url': '11 Check Primality Functions.html'}, {'title': '12 List Ends', 'text': 'Exercise 12 (and Solution) \n Write a program that takes a list of numbers (for example,\xa0 a = [5, 10, 15, 20, 25] ) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function. \n Concepts to practice \n \n Lists and properties of lists \n List comprehensions (maybe) \n Functions \n \n Happy coding! \n Forgot how to\xa0 submit exercises ? \n \n 練習12（和解決方案） 編寫一個程序，該程序接受一個數字列表（例如，a = [5、10、15、20、25]），並僅給出給定列表的第一個和最後一個元素組成一個新列表。 為了練習，請在函數內編寫此代碼。 \n 練習概念 列表和列表屬性 列表理解（也許） 職能 祝您編碼愉快！ 忘記瞭如何提交練習？ \n', 'tags': '', 'url': '12 List Ends.html'}, {'title': '9 Guessing Game One', 'text': 'Exercise 9 (and Solution) \n Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. ( Hint: remember to use the user input lessons from the very \xa0first exercise ) \n Extras: \n \n Keep the game going until the user types “exit” \n Keep track of how many guesses the user has taken, and when the game ends, print this out. \n \n \n Discussion \n Concepts for this week: \n \n Modules \n Random numbers \n User input \n \n Random Numbers (and Modules) \n This is your first exposure to using Python code that somebody else wrote. In Python, these formally-distributed code packages are called \xa0 modules . The thing we want from a module in this exercise is the ability to generate random numbers. This comes from the \xa0 random \xa0 module. \n To use a module, at the top of your file, type \n \n \t import   random \n \n This means you are allowing your Python program to use a module called \xa0 random \xa0 in the rest of your code. \n To use it (and generate a random integer), now type: \n \n \t a   =   random . randint ( 2 ,   6 ) \n \n Once you run this program, the variable \xa0 a \xa0 will have a random integer that the computer made for you, between 2 and 6 (including 2 and 6). The specific documentation for this method is \xa0 here . \n There are many ways you can generate random numbers - integers, decimals, and much more. The \xa0 Python documentation \xa0 has much more detailed information about what is possible from the \xa0 random \xa0 module. \n User input \n We covered all you need to know in the\xa0 first exercise \xa0 of this blog! \n Happy coding! \n Forgot how to\xa0 submit exercises ? \n \n 練習9（和解決方案） 生成1到9之間的隨機數（包括1到9）。讓用戶猜數字，然後告訴他們猜的是太低，太高還是完全正確。 （提示：請記住在第一練習中使用用戶輸入的課程） \n 附加功能： \n 繼續遊戲，直到用戶鍵入“退出” 跟踪用戶進行了多少猜測，當遊戲結束時，將其打印出來。 討論區 本週的概念： \n 模組 隨機數 用戶輸入 隨機數（和模塊） 這是您第一次使用別人編寫的Python代碼。在Python中，這些正式分發的代碼包稱為模塊。在本練習中，我們希望從模塊獲得的是生成隨機數的能力。這來自隨機模塊。 \n 要使用模塊，請在文件頂部鍵入 \n 隨機導入 這意味著您將允許Python程序在其餘代碼中使用一個名為random的模塊。 \n 要使用它（並生成一個隨機整數），現在鍵入： \n a = random.randint（2，6） 一旦運行此程序，變量a將具有計算機為您製作的2到6（包括2到6）之間的隨機整數。此方法的特定文檔在這裡。 \n 您可以通過多種方式生成隨機數-整數，小數等。 Python文檔提供了有關隨機模塊可能實現的功能的詳細信息。 \n 用戶輸入 在本博客的第一個練習中，我們介紹了您需要了解的所有信息！ \n 祝您編碼愉快！ 忘記瞭如何提交練習？ \n', 'tags': '', 'url': '9 Guessing Game One.html'}, {'title': 'HW1', 'text': '', 'tags': '', 'url': 'HW1.html'}, {'title': 'UNIT 2 Hardware Basics PCH 1 The Basics', 'text': 'Introduction \n This lesson will cover the basics of PC Hardware. First, you will learn the various parts of both desktop and laptop computers. Next, you will discover basic terms that are associated with computers, such as hardware, software, and firmware. You will learn the most basic functions of a computer: input, output, storage, and processing. Next, you will explore various input and output interfaces on the computer and the associated cables. Finally, you will review connections between common peripherals and discuss the standard ports. \n 介紹 \n 本課將介紹PC硬件的基礎知識。 首先，您將學習台式計算機和便攜式計算機的各個部分。 接下來，您將發現與計算機關聯的基本術語，例如硬件，軟件和固件。 您將學習計算機的最基本功能：輸入，輸出，存儲和處理。 接下來，您將探索計算機上的各種輸入和輸出接口以及相關的電纜。 最後，您將回顧通用外設之間的連接並討論標準端口。 \n Functions of Computers: Input, Output, Storage, and Processing \n What makes a computer a computer? Does a computer have to have certain pieces to be considered a computer? Consider the computers of the 1980s: they all included a display screen, a keyboard, and a processing unit. Over time, the computers have evolved into devices that do not look like a “typical” computer. Consider the iPhone or Android tablet, where the method of input relies on touch, without the use of a separate keyboard. How about the calculator watch displayed below; is it a computer? \n Calculator watch. Photo\xa0used\xa0under\xa0CC-BY-NC\xa0license\xa0from \xa0 Tim Deering \n Regardless of the \xa0 form factor \xa0 of the machine, four basic functions — input, output, storage, and processing — make a computer. Below is a display of how those functions work together. \n \n So, as we consider the history of computers and the future of computers, we must consider what is and what is not a computer. Obviously, our desktops and laptops are computers, since they perform the input, processing, output, and storage functions. But so also are our cellular phones and smartphones, since they perform all these functions. What about our televisions? Many of these are complex computers as well, since they take information from our input using the remote control, process the information, and return an output, such as an on-demand movie. Many of these televisions also store the information, such as your favorite channels or even the video content itself for later playback. Even some thermostats are computers, since they also perform these functions, such as the “smart thermostats,” like the NEST and other popular brands. Remember, the main determination of whether something is a computer or not relies on the functions it performs: does it perform input, processing, output, and storage? If so, then it is a computer. \n \n \n \n \n \n \n 計算機功能：輸入，輸出，存儲和處理 \n 是什麼使計算機成為計算機？ 一台計算機是否必須具有某些部件才能視為計算機？ 考慮一下1980年代的計算機：它們都包括顯示屏，鍵盤和處理單元。 隨著時間的流逝，計算機已經演變為看起來不像“典型”計算機的設備。 考慮iPhone或Android平板電腦，其中輸入方法依靠觸摸，而不使用單獨的鍵盤。 下面顯示的計算器手錶怎麼樣？ 是電腦嗎？ \n 具有數字輸入鍵和LED顯示屏的計算器手錶的照片。 計算器手錶。 照片由Tim Deering根據CC-BY-NC許可使用 \n 不論機器的外形尺寸如何，計算機都具有四個基本功能（輸入，輸出，存儲和處理）。 下面顯示了這些功能如何協同工作。 \n \n \n \n 因此，當我們考慮計算機的歷史和計算機的未來時，我們必須考慮什麼是計算機，什麼不是計算機。顯然，我們的台式機和筆記本電腦是計算機，因為它們執行輸入，處理，輸出和存儲功能。但是，由於我們的手機和智能手機執行所有這些功能，所以它們也是如此。那我們的電視呢？其中許多計算機也是複雜的計算機，因為它們使用遙控器從我們的輸入中獲取信息，處理信息並返回輸出，例如點播電影。這些電視中的許多電視也會存儲信息，例如您喜歡的頻道，甚至是視頻內容本身，以供以後播放。甚至有些恆溫器都是計算機，因為它們也執行這些功能，例如NEST和其他流行品牌的“智能恆溫器”。記住，對某物是否是計算機的主要確定取決於它執行的功能：它執行輸入，處理，輸出和存儲嗎？如果是這樣，則它是一台計算機。 \n Hardware \n A computer system includes hardware, software, and firmware. To build a computer, we must first gather the required hardware. The hardware is the part of the computer that you can touch and feel. When most people see a typical computer, they understand that there are physical components to what they are using, such as the the hard metallic or plastic System unit, central processing unit (CPU), power supply, disk drives, and other essential components. Hardware is limited by its manufacture date and specifically by the motherboard installed. Depending on age and availability, some of the hardware items may be expensive to acquire, repair, or replace. For example, if the computer is running slower over time as you add newer software, it may be necessary to increase the amount of physical memory, called \xa0 RAM \xa0 (random access memory), in the computer. In order to do this, the technician would need to purchase the correct size, speed, and style of memory according to the motherboard specifications and install it in the computer which will then enhance its ability to process information more quickly. \n Computer hardware consists of the mechanical and electrical parts of the computer. Data flows through the motherboard in what is known as the system bus. External ports, which are discussed in more detail further in this lesson, allow peripheral devices to be connected to the system unit. Common ports are USB, serial, and parallel ports. \n Peripheral devices consist of hardware attached to the system unit and are designated as input, output, or both. Traditional input device examples are the mouse and keyboard which are used to input data. \n Input devices: keyboard and mouse. Photo used under CC-BY-NC-ND license from \xa0 Ben Ward . \n Output devices consist of common items such as monitors, speakers, and printers. All of these devices are ways that the computer can give feedback to the user through either visual or auditory output. \n Traditionally singular devices have evolved to become both input and output. Gaming Joysticks which provide feedback to the user through vibrations and of course the touch-screen display now serve as both. \n Output devices: monitor and speaker. Photo used under CC-BY-SA license from \xa0 William Hook . \n \n 硬件 \n \n 計算機系統包括硬件，軟件和固件。要構建計算機，我們必須首先收集所需的硬件。硬件是您可以觸摸和感覺到的計算機的一部分。當大多數人看到一台典型的計算機時，他們就會知道他們所使用的是物理組件，例如硬質金屬或塑料系統單元，中央處理器（CPU），電源，磁盤驅動器和其他必要組件。硬件受製造日期限制，特別是受安裝的主板限制。根據使用年限和可用性，某些硬件項目的購置，維修或更換可能會很昂貴。例如，如果在添加新軟件時計算機運行速度隨著時間的推移變慢，則可能有必要增加計算機中稱為RAM（隨機存取存儲器）的物理內存量。為此，技術人員需要根據主板規格購買正確的大小，速度和內存類型，然後將其安裝在計算機中，這將增強其更快地處理信息的能力。 計算機硬件由計算機的機械和電氣部分組成。數據以所謂的系統總線流經母板。在本課程中將進一步詳細討論的外部端口允許將外圍設備連接到系統單元。通用端口是USB，串行和並行端口。 外圍設備由連接到系統單元的硬件組成，並被指定為輸入，輸出或兩者。傳統的輸入設備示例是用於輸入數據的鼠標和鍵盤。 \n 輸入設備：鍵盤和鼠標。 本照片由Ben Ward根據CC-BY-NC-ND許可使用。 \n 輸出設備由通用項目組成，例如監視器，揚聲器和打印機。 所有這些設備都是計算機可以通過視覺或聽覺輸出向用戶提供反饋的方式。 傳統上，單個設備已演變為輸入和輸出。 通過振動向用戶提供反饋的遊戲操縱桿，當然觸摸屏顯示器現在兼用作兩者。 \n 輸出設備：監聽器和揚聲器。 照片由WilliamHook根據CC-BY-SA許可使用。 \n S oftware \n \n \n Software is completely intangible and cannot be physically touched. Software, in its purest form, is a series of 1s and 0s (bits) that make up the code that gives the computer its instructions on how to perform a certain task. While you may be able to touch the media on which the software is stored (like a CD or DVD), you cannot really touch the software code itself. \n The most basic software that a computer requires is the operating system. There are numerous operating systems on the market today, including various versions of Microsoft Windows, Macintosh OS X, Linux, Android, and iOS, to name just a few. The operating system provides the standard methods for saving, retrieving, changing, printing, and transmitting information in the computer. Operating systems contain internal commands, which are programs that are built into the operating system to perform basic tasks such as file management (delete, copy, and rename files). Additionally, operating systems also contain external commands, which are added programs to complete more complicated functions, such as defragmentation of a hard drive or handling the remote control of another computer on the network. \n Finally, there are software programs called applications. These programs are used to create, store, modify, and view information that you create. Applications, such as Microsoft Office or Adobe Acrobat, allow you to read and create documents and presentations. Other applications, such as games and web browsers, may instead be used for entertainment. \n 軟件 \n 軟件是完全無形的，不能被實際觸摸。最純粹形式的軟件是由一系列1和0（位）組成的代碼，這些代碼向計算機提供有關如何執行特定任務的指令。雖然您可以觸摸存儲軟件的介質（例如CD或DVD），但實際上不能觸摸軟件代碼本身。 \n 計算機所需的最基本的軟件是操作系統。當今市場上有許多操作系統，包括Microsoft Windows，Macintosh OS X，Linux，Android和iOS的各種版本，僅舉幾例。操作系統提供了用於在計算機中保存，檢索，更改，打印和傳輸信息的標準方法。操作系統包含內部命令，這些內部命令是操作系統中內置的用於執行基本任務（例如文件管理（刪除，複製和重命名文件））的程序。此外，操作系統還包含外部命令，這些命令是添加的程序，可以完成更複雜的功能，例如對硬盤驅動器進行碎片整理或處理網絡上另一台計算機的遠程控制。 \n 最後，有稱為應用程序的軟件程序。這些程序用於創建，存儲，修改和查看您創建的信息。諸如Microsoft Office或Adobe Acrobat之類的應用程序允許您閱讀並創建文檔和演示文稿。可以將其他應用程序（例如游戲和Web瀏覽器）用於娛樂。 \n Firmware \n Firmware is a combination of hardware and software, often called “software on a chip.” Firmware allows control of the device to which the chip is connected. A firmware chip contains specialized software and is often attached to motherboards, optical drives (such as CD, DVD, or Blu-ray), mass storage devices, and other specialized hardware. \n In older generations of firmware, the firmware was not upgradable unless you replaced the physical chip, but in recent years firmware has been designed to be “flashable.” This means that the chip can be upgraded if the software is outdated or has a programming error. This firmware “flash” replaces the older software on the chip with the latest version, improving performance or enhancing security. \n The most common type of firmware found in a computer is called the BIOS (basic input/output system), which provides the computer with the most basic of tasks before the operating system is even loaded. Without the BIOS, the computer would be rather useless, as it wouldn’t even be able to read the hard drive and load the operating system. Firmware is persistent: it remains on the chip even after the power is removed, unlike temporary storage (such as RAM). \n 固件 \n 固件是硬件和軟件的組合，通常稱為“芯片上的軟件”。固件允許控制芯片所連接的設備。固件芯片包含專用軟件，通常連接到主板，光盤驅動器（例如CD，DVD或藍光），大容量存儲設備和其他專用硬件。 \n 在較早版本的固件中，除非更換了物理芯片，否則固件無法升級，但是近年來，固件被設計為“可閃存”。這意味著，如果軟件過時或出現編程錯誤，則可以升級芯片。該固件“閃存”用最新版本替換了芯片上的舊軟件，從而提高了性能或增強了安全性。 \n 計算機中最常見的固件類型稱為BIOS（基本輸入/輸出系統），BIOS甚至在加載操作系統之前，即可為計算機提供最基本的任務。如果沒有BIOS，計算機將毫無用處，因為它甚至無法讀取硬盤驅動器並加載操作系統。固件具有持久性：與臨時存儲（例如RAM）不同，固件即使在斷電後仍保留在芯片上。 \n Componentization/Standardization \n Componentization is the process of breaking down large and complex items into simple, reusable, and interchangeable pieces. For many years, computer software and hardware were made by individual companies building things that only worked for a single system. For example, if IBM made a network card, it would not work in a Compaq or Dell computer. Over the years, hardware developers realized that if they could agree to a set of standards, they could create components that could be built to work together using standard interfaces, which saves time, money, and complexity. This same concept is now being used in the software world under object-oriented programming — a standardized method of programming. \n Standardization allows for a set of rules that everyone can follow so that hardware is interoperable and software is interoperable. This increases the ability to have componentization of hardware and software, since the input and output created are standardized. For example, web pages are coded in HTML (HyperText Markup Language), which all web browsers understand. Therefore, the user can use any web browser and still get the content they are interested in viewing because of the standardization of the system. \n 組件化/標準化 \n 組件化是將大型和復雜項目分解為簡單，可重用和可互換的部分的過程。多年來，計算機軟件和硬件是由獨立的公司製造的，這些公司只能在單個系統上工作。例如，如果IBM製作了網卡，則它不能在Compaq或Dell計算機中工作。多年來，硬件開發人員意識到，如果他們同意一套標準，他們可以創建可以使用標準接口構建為可以協同工作的組件，從而節省了時間，金錢和復雜性。現在，在面向對象的程序設計（一種標準化的程序設計方法）下的軟件世界中使用了相同的概念。 \n 標準化允許每個人都可以遵循一組規則，以便硬件可互操作，軟件可互操作。由於創建的輸入和輸出是標準化的，因此這提高了對硬件和軟件進行組件化的能力。例如，網頁以HTML（超文本標記語言）編碼，所有網絡瀏覽器都可以理解。因此，由於系統的標準化，用戶可以使用任何Web瀏覽器，並且仍然可以獲得他們感興趣的內容。 \n Connection Interfaces and Cables \n When looking at a customer’s personal computer, you must be able to easily identify the various components that make up the computer by sight. As you look at the image of the computer, you notice the various parts, such as the CD/DVD drive and the memory card reader bay. Both of these components would be classified as part of the storage subsystem. The headphone jack is used for audio output, while the microphone jack is used for audio input. The USB and FireWire ports are used for both input and output, as well as storage, depending on the device that is connected to the port. For example, if we connect a printer to the USB port, it would be used for output, but if we instead connected a mouse to the USB port, it would be used for input. \n 連接接口和電纜 \n 查看客戶的個人計算機時，您必須能夠通過視線輕鬆識別組成計算機的各種組件。 當您查看計算機的圖像時，會注意到各個部分，例如CD / DVD驅動器和存儲卡讀取器托架。 這兩個組件都將歸類為存儲子系統的一部分。 耳機插孔用於音頻輸出，而麥克風插孔用於音頻輸入。 USB和FireWire端口用於輸入和輸出以及存儲，具體取決於連接到端口的設備。 例如，如果我們將打印機連接到USB端口，它將用於輸出，但是如果我們將鼠標連接到USB端口，則它將用於輸入。 \n External Components of the Desktop System Unit \n The lab activity below is designed to help you locate and understand the purpose of the various bays and ports on a desktop PC system unit. To identify components, move your mouse pointer over the name of the component or the image. Then be sure to click on each component to see a detailed view. In the detailed view, you will be able to examine the cables of various peripherals. You also will be able to see the most common bays and the way peripherals fit into them. \n 台式機系統單元的外部組件 \n 下面的實驗活動旨在幫助您查找和了解台式PC系統單元上各種托架和端口的用途。 要識別組件，請將鼠標指針移到組件或圖像的名稱上。 然後，請確保單擊每個組件以查看詳細視圖。 在詳細視圖中，您將能夠檢查各種外圍設備的電纜。 您還將能夠看到最常見的托架以及外圍設備裝入它們的方式。 \n Connections Between Common Peripherals and Standard Ports \n The peripherals connect to the computer via standard ports. Ports allow for information to flow into or out of the computer as part of the input and output subsystems. External devices, such as keyboards, mice, printers, scanners, storage devices, monitors, and others can connect to the computer through various types of cables, which connect to specific ports. On most modern systems, this has been reduced down to a common, standard interface, the universal serial bus port (USB port). Older systems have various ports for various functions, which are now referred to as legacy ports, such as PS/2, serial, and parallel ports. They were difficult to configure and required hardware resources to be dedicated to them, such as interrupt requests, direct memory access, and specific I/O (input/output) port addresses. In USB, this is all handled by the operating system automatically. This makes hardware conflicts rare in current systems. Many customers will still have computers with legacy ports. So, it is important to understand multiple ports and connections. \n The photo below offers a close-up view of a motherboard’s port cluster. \n \n Port cluster photo used under CC-BY license from \xa0 Edmund Tse . Firewire port photo used under CC-BY-SA license from \xa0 Wikimedia Commons . \n \n The chart below describes the functions of the ports depicted in the image above. \n \n \n \n PORT \n NAME \n FUNCTION \n \n \n A \n PS/2 \n Used to connect keyboards and mice. \n \n \n B \n USB \n Used to connect external devices with a \xa0 universal serial bus \xa0 (USB) connector, such as mice, keyboards, printers, and storage devices. \n \n \n C \n S/PDIF Optical \n Used to connect digital high-fidelity audio systems. \n \n \n D \n HDMI \n Used to connect a \xa0 high-definition multimedia interface \xa0 (HDMI). \n \n \n E \n VGA \n Used to connect a \xa0 video graphics array \xa0 (VGA) display device. \n \n \n F \n DVI \n Used to connect a \xa0 digital video interface \xa0 (DVI) display device. \n \n \n G \n USB \n Used to connect external devices with a \xa0 universal serial bus \xa0 (USB) connector, such as mice, keyboards, printers, and storage devices. \n \n \n H \n IEEE 1394 \n Used to connect external FireWire devices, such as hard drives and cameras. \n \n \n I \n RJ-45 \n Used to connect to an Ethernet network. \n \n \n J \n USB \n Used to connect external devices with a \xa0 universal serial bus \xa0 (USB) connector, such as mice, keyboards, printers, and storage devices. \n \n \n K \n Audio \n Used to connect to a speaker system. \n \n \n \n The photo below shows various types of connectors. \n \n \n Image Credits Terry Chay . DB-25 parallel cable photo (B) used under public domain from \xa0 Clipart Today . DB-15 cable photo (C) used under public domain from \xa0 Wikipedia . VGA cable photo (D) used under public domain image from \xa0 Clipart Today . DVI cable photo (E) used under public domain from \xa0 Clipart Today . PS/2 cable photo (F) used under CC-BY-SA license from \xa0 Wikipedia . RJ-11 (telephone modem) cable photo (G) used under CC-BY-NC-ND license from \xa0 Lori Semprevio . RJ-45 cable photo (H) used under CC-BY-NC-ND license from \xa0 Gabriel R F . USB Cable photo (I) used under public domain from \xa0 Wikipedia . HDMI cable photo (J) used under public domain from \xa0 Clipart Today . Mini stereo cable photo (K) used under public domain from \xa0 Clipart Today . \n \n \n The chart below describes the functions of the connectors depicted in the image above. \n \n \n \n CONNECTOR \n NAME \n FUNCTION \n \n \n A \n DB-9 serial \n Used for serial devices such as a mouse or external modem. \n \n \n B \n DB-25 parallel \n Used to connect printers. \n \n \n C \n DB-15 \xa0 (two rows of pin receptacles) \n Used to connect joysticks or \xa0 musical instrument digital interface \xa0 (MIDI) devices. \n \n \n D \n High-density DB-15 \xa0 (three rows of pins) \n Used to connect a \xa0 video graphics array \xa0 (VGA) and \xa0 super VGA \xa0 (SVGA) display device. \n \n \n E \n DVI video \n Used to connect a \xa0 digital video interface (DVI) \xa0 display monitor. \n \n \n F \n 6-pin mini-DIN \n Used for PS/2 keyboards and mice. By convention, purple connectors are used for keyboards and green connectors are used for mice. \n \n \n G \n RJ-11 (four wires inside plug interface) \n Used for internal modem or telephone. \n \n \n H \n RJ-45 \xa0 (eight wires inside jack interface) \n Used to connect to an Ethernet network. \n \n \n I \n USB type A \n Used for external \xa0 universal serial bus \xa0 (USB) devices such as printers and storage devices. \n \n \n J \n HDMI \n Used to connect a \xa0 high definition multimedia interface (HDMI) \xa0 display monitor. \n \n \n K \n Mini Stereo \n Also known as "1/8 inch" or "3.5 mm" connectors, these are used to connect audio devices such as headphones and speakers. \n \n \n \n \n \n \n learn by doing \n \n \n \n \n \n \n \n Match the connector to the port. \n \n \n \n \n \n Connector \n Port \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \xa0 \n \n \xa0 \n \n \xa0 \n \n \xa0 \n \n \n 通用外設與標準端口之間的連接 \n \n 外圍設備通過標準端口連接到計算機。端口允許信息作為輸入和輸出子系統的一部分流入或流出計算機。外部設備（例如鍵盤，鼠標，打印機，掃描儀，存儲設備，監視器和其他設備）可以通過連接到特定端口的各種類型的電纜連接到計算機。在大多數現代系統上，這已簡化為通用的標準接口，即通用串行總線端口（USB端口）。較舊的系統具有用於各種功能的各種端口，這些端口現在稱為傳統端口，例如PS / 2，串行和並行端口。它們很難配置，並且需要專用於它們的硬件資源，例如中斷請求，直接內存訪問和特定的I / O（輸入/輸出）端口地址。在USB中，這全部由操作系統自動處理。這使得在當前系統中很少發生硬件衝突。許多客戶仍將擁有帶有舊端口的計算機。因此，了解多個端口和連接很重要。 下面的照片提供了主板端口集群的特寫視圖。 \n 謝德敏（Edmund Tse）根據CC-BY許可使用的端口群集照片。 由Wikimedia Commons按照CC-BY-SA許可使用的Firewire端口照片。 \n USB AND PS/2 \n USB \n The\xa0 universal serial bus (USB) \xa0 has replaced many of the external input and output ports on modern computers. In fact, USB can connect virtually any device to a computer, in modern devices. \n USB logo. Photo used under CC-BY-NC license from \xa0 albjimenez . \n Things such as mice and keyboards, which used to use PS/2 or serial ports, now use USB. Things like printers and scanners, which once used parallel or SCSI ports, now use USB as well. Small computer system interface (SCSI) is a set of parallel interface standards developed by the American National Standards Institute (ANSI) for attaching printers, disk drives, scanners and other peripherals to computers. SCSI (pronounced "skuzzy") is supported by all major operating systems. USB began with version 1.1, which provided two speeds of operations: low-speed (1.5 Mbps for input devices such as mice/keyboards) and full-speed (12 Mbps for other devices, such as webcams, digital cameras, scanners, and printers). USB 2.0 further increased speed to what is known as high-speed or hi-speed (480 Mbps), allowing for USB to provide faster access to external storage devices such as hard drives, helping to replace SCSI and FireWire ports. USB 3.0, the current version, is known as superspeed, because it provides up to 5 Gbps of bandwidth for very fast access to external devices and can be identified by the blue color. Newer versions of USB are backward compatible with older versions, but you should not connect different versions of USB on the same port, as this slows the port down to the lowest version. For example, if you plug in a four-port USB hub to a USB 3.0 port, but then connect a USB 1.1 mouse to the hub, the entire four-port hub will now run at a maximum speed of 12 Mbps (USB 1.1 speeds). Each USB port can be daisy-chained to provide up to 127 devices per port, using USB hubs. \n USB cables should be kept under three meters (approximately nine feet) in length for USB 1.1 and 3.0. For the USB 2.0 variant, you can use cables up to five meters (approximately 15 feet) without issues. If you use cables longer than the recommended length, you may get errors in your input/output over USB, so it is best to keep the USB cables short. If you need a longer cable run, you must use a hub as a repeater to help boost the power signal over the USB cable. There are two types of hubs: self-powered and bus-powered. Self-powered hubs have their own power adapter and connect to the wall outlet to provide power to the hub. Bus-powered are instead powered solely from the source USB port that they are connected to on the computer. This provides minimal amperage for the devices connected to the USB hub that can cause issues when connecting multiple hubs to each other. For connection of multiple hubs, it is best practice to use self-powered hubs. Each USB port can support up to 127 different devices in the chain, with the root hub for the computer having two ports directly connected to the motherboard. If you need more USB ports, you can do this by adding hubs (self-powered or bus-powered), using motherboard USB header cables, or adding expansion cards that contain more USB ports. \n Caption: USB hub. Photo used under CC-BY-SA license from \xa0 Clive Darra . \n \n USB \n \n 通用串行總線（USB）取代了現代計算機上的許多外部輸入和輸出端口。 實際上，在現代設備中，USB幾乎可以將任何設備連接到計算機。 \n USB徽標。 照片由albjimenez根據CC-BY-NC許可使用。 \n 鼠標和鍵盤等以前使用PS / 2或串行端口的設備現在使用USB。曾經使用並行或SCSI端口的打印機和掃描儀之類的東西現在也使用USB。小型計算機系統接口（SCSI）是由美國國家標準協會（ANSI）開發的一組並行接口標準，用於將打印機，磁盤驅動器，掃描儀和其他外圍設備連接到計算機。所有主要操作系統都支持SCSI（讀作“ skuzzy”）。 USB從版本1.1開始，提供兩種運行速度：低速（對於鼠標/鍵盤等輸入設備為1.5 Mbps）和全速（對於網絡攝像頭，數碼相機，掃描儀和打印機等其他設備為12 Mbps） ）。 USB 2.0將速度進一步提高到所謂的高速或高速（480 Mbps），從而使USB可以更快地訪問外部存儲設備（例如硬盤驅動器），從而幫助替換SCSI和FireWire端口。當前版本的USB 3.0被稱為超高速，因為它提供高達5 Gbps的帶寬，可以非常快速地訪問外部設備，並且可以通過藍色識別。較新版本的USB向後兼容較舊版本的USB，但是您不應在同一端口上連接不同版本的USB，因為這會將端口速度降低到最低版本。例如，如果將四端口USB集線器插入USB 3.0端口，然後將USB 1.1鼠標連接到集線器，則整個四端口集線器現在將以12 Mbps的最大速度運行（USB 1.1速度）。每個USB端口都可以使用USB集線器進行菊花鏈連接，以每個端口提供多達127個設備。 對於USB 1.1和3.0，USB電纜的長度應保持在三米（約9英尺）以下。對於USB 2.0版本，您可以使用最長5米（約15英尺）的電纜而不會出現問題。如果使用的電纜長度超過建議的長度，則通過USB進行的輸入/輸出可能會出現錯誤，因此最好使USB電纜的長度短。如果需要較長的電纜，則必須使用集線器作為中繼器，以幫助增強USB電纜上的電源信號。集線器有兩種類型：自供電和總線供電。自供電的集線器具有自己的電源適配器，並連接至壁裝電源插座以為集線器供電。總線供電僅由它們在計算機上連接的源USB端口供電。這為連接到USB集線器的設備提供了最小的電流強度，當將多個集線器相互連接時會引起問題。對於連接多個集線器，最佳做法是使用自供電集線器。每個USB端口可在鏈中最多支持127個不同的設備，計算機的根集線器具有直接連接到主板的兩個端口。如果需要更多USB端口，則可以通過添加集線器（自供電或總線供電），使用主板USB接頭連接線或添加包含更多USB端口的擴展卡來實現。 \n 標題：USB集線器。 照片由Clive Darra根據CC-BY-SA許可使用。 \n \n PS/2 \n PS/2 ports, also known as mini-DIN ports, were commonly used for keyboards and mice until the past decade. Recently, these ports have been replaced by USB in most machines. These ports, though, are color-coded for the device which they are intended to be used with. The keyboard port is colored purple, and the mouse port is colored green. Even though these ports look identical, they are not interchangeable. If you plug a mouse into the keyboard port, it simply won’t work. Additionally, unlike USB, these ports are not hot-swappable. Instead, you must restart the machine after plugging the device in for the computer to recognize the new mouse or keyboard. \n \n PS/2 ports. Photo used under CC-BY-NC-SA license from \xa0 Rodrigo Justi \n \n PS / 2 \n \n PS / 2端口（也稱為mini-DIN端口）在過去十年中一直廣泛用於鍵盤和鼠標。 最近，在大多數機器中，這些端口已被USB取代。 但是，這些端口已針對要使用的設備進行了顏色編碼。 鍵盤端口為紫色，鼠標端口為綠色。 即使這些端口看起來相同，也不能互換。 如果將鼠標插入鍵盤端口，則根本無法使用。 此外，與USB不同，這些端口不可熱插拔。 而是必須在插入設備後重新啟動機器，計算機才能識別新的鼠標或鍵盤。 \n PS / 2端口。 RodrigoJusti根據CC-BY-NC-SA許可使用的照片 \n SCSI and FireWire \n FireWire \n FireWire was originally developed and made popular by Apple as a challenger to USB and a replacement for SCSI. FireWire is a high-speed, bidirectional, serial transmission port used to connect PCs to each other, or devices to PCs. It was introduced during the days of USB 1.1 as a faster alternative, since USB 1.1 had a maximum speed of 12 Mbps and FireWire has a maximum speed of 400 Mbps under IEEE 1394a (FireWire 400) and 800 Mbps under IEEE 1394b (Firewire 800). Common uses for FireWire were to connect to external storage devices and digital media devices, such as video cameras. Most FireWire devices have two FireWire ports to allow for daisy-chaining of the devices, which supports up to 16 devices per FireWire port without any degradation. FireWire remains popular with Mac OS X, but has lost much of its popularity with the introduction of USB 3.0, since the speed is much quicker with USB 3.0. \n FireWire card. FireWire card photo used under CC-BY license from \xa0 Emilian Robert Vicol . \n \n 火線 \n \n FireWire最初是由Apple開發並流行為USB的挑戰者和SCSI的替代品。 FireWire是一個高速，雙向，串行傳輸端口，用於將PC彼此連接，或將設備連接至PC。 由於USB 1.1的最高速度為12 Mbps，而FireWire在IEEE 1394a（FireWire 400）下為400 Mbps，在IEEE 1394b（Firewire 800）下為800 Mbps，因此它是USB 1.1的最快替代產品。 。 FireWire的常見用途是連接到外部存儲設備和數字媒體設備，例如攝像機。 大多數FireWire設備具有兩個FireWire端口，以實現設備的菊花鏈連接，每個FireWire端口最多支持16個設備，而不會發生任何性能下降。 FireWire在Mac OS X上仍然很流行，但是由於USB 3.0的速度要快得多，因此在引入USB 3.0時已經失去了很多流行性。 \n 火線卡。 EmilianRobert Vicol根據CC-BY許可使用的FireWire卡照片。 \n \n SCSI \n \n SCSI stands for small computer systems interface, and is a legacy type of connector. It is used to connect hard disk drives, tape drives, ZIP drives, JAZ drives, scanners, optical drives (CD/DVD), and printers to a computer both internally and externally. SCSI is found mainly in servers for hard disk drives and tape drives, but was sometimes found in older workstations in the 1990s. SCSI supports daisy-chaining and was the precursor to FireWire. SCSI can be narrow (supporting up to seven devices on a single port) or wide (supporting up to 15 devices on a single port). SCSI also requires that a unique ID be assigned to each device in the chain, so the computer knows which device is which. This is accomplished using either a \xa0 DIP switchor jumper that assigns a unique ID of 0-15 (for wide), or 0-7 (for narrow). Finally, each chain must have a termination plug to signify the end of the SCSI chain. SCSI chains can contain many devices of mixed speeds, but this causes the whole “chain” to default to the slowest device. Speed for SCSI ranges from 10 Mbps to 320 Mbps. Since the advent of FireWire, SCSI has lost popularity as an external port for storage devices. Internally, SCSI has been replaced by the SATA[KK1] connector, which we will discuss in the section on storage later in the course. \n Two blue SCSI ports. SCSI Ports photo used under CC-BY-SA license from \xa0 Gerben Wierda . \n \n SCSI \n \n SCSI代表小型計算機系統接口，並且是舊版連接器。它用於將硬盤驅動器，磁帶驅動器，ZIP驅動器，JAZ驅動器，掃描儀，光盤驅動器（CD / DVD）和打印機內部和外部連接到計算機。 SCSI主要在用於硬盤驅動器和磁帶驅動器的服務器中找到，但有時在1990年代在較舊的工作站中發現。 SCSI支持菊花鏈，並且是FireWire的前身。 SCSI可以很窄（在單個端口上最多支持七個設備）或很寬（在單個端口上最多支持15個設備）。 SCSI還要求將唯一的ID分配給鏈中的每個設備，以便計算機知道哪個設備是哪個設備。這可以通過使用DIP切換器跳線來實現，該跳線將唯一ID分配為0-15（對於寬）或0-7（對於窄）。最後，每個鏈必須有一個端接插頭以表示SCSI鏈的末端。 SCSI鏈可能包含許多混合速度的設備，但這會導致整個“鏈”默認為最慢的設備。 SCSI的速度範圍從10 Mbps到320 Mbps。自FireWire出現以來，SCSI作為存儲設備的外部端口已不再流行。在內部，SCSI已由SATA [KK1]連接器取代，我們將在本課程稍後的存儲部分中討論該連接器。 \n \n \n 兩個藍色的SCSI端口。 SCSI端口照片由GerbenWierda根據CC-BY-SA許可使用。 \n Serial and Parallel Ports \n Serial Ports \n Serial ports, also known as COM or RS-232 ports, were used heavily in the 1980s and 1990s for serial communication as input/output ports. They were often used for external modems, mice, trackballs, touchpads, plotters, label printers, dot-matrix printers, PDA (Palm Pilot) docking stations, digital cameras, and PC-to-PC connections. USB has replaced serial ports for all of these uses in modern computers, but some people still have a need for a serial port. If your computer doesn’t have a serial port (which is very common in modern machines), you can add one using an expansion card or a USB to serial adapter. Serial ports come in two varieties: DB-25 (containing 25 pins) and DB-9 (containing nine pins). The DB-9 variety is the most common in use. Serial ports are generally slow, since they send data one bit at a time over the wire. There is no standard serial cable pinout; instead, they are created for the application they are used for, such as a null-modem cable to connect two computers directly, or a modem cable to connect the computer to an external modem. The most common variety of serial cable in use today is the CISCO rollover cable, which has a nine-pin serial port on one end and an RJ-45 connector (like a network cable) on the other end. This cable is used to connect a computer to a CISCO router or switch for configuration tasks. \n Serial cable connector. Photo used under CC-BY-NC-ND license from \xa0 Brad Wilmot . \n Serial port. Photo used under CC-BY-NC-ND license from \xa0 yum 9 me . \n \n 串口 \n \n 串行端口，也稱為COM或RS-232端口，在1980年代和1990年代被大量用於串行通信，作為輸入/輸出端口。它們通常用於外部調製解調器，鼠標，軌跡球，觸摸板，繪圖儀，標籤打印機，點矩陣打印機，PDA（Palm Pilot）擴展塢，數碼相機以及PC到PC的連接。 USB已取代了現代計算機中所有這些用途的串行端口，但是有些人仍然需要串行端口。如果您的計算機沒有串行端口（這在現代計算機中很常見），則可以使用擴展卡或USB到串行適配器添加一個。串行端口有兩種：DB-25（包含25個引腳）和DB-9（包含9個引腳）。 DB-9品種是最常用的品種。串行端口通常很慢，因為它們一次通過有線發送數據一位。沒有標準的串行電纜引出線。相反，它們是針對用於它們的應用程序創建的，例如直接連接兩台計算機的零調製解調器電纜，或用於將計算機連接到外部調製解調器的調製解調器電纜。當今使用的最常見的串行電纜是CISCO翻轉電纜，其一端有一個9針串行端口，而另一端有一個RJ-45連接器（如網絡電纜）。該電纜用於將計算機連接到CISCO路由器或交換機以執行配置任務。 \n 串行電纜連接器。 由BradWilmot根據CC-BY-NC-ND許可使用的照片。 \n 串行端口。 由yum9我根據CC-BY-NC-ND許可使用的照片。 \n Parallel Ports \n \n Parallel ports, also known as LPT (line printer terminal) ports, were used heavily in the 1980s and 1990s for parallel communication as input/output ports. They were often used for printers and scanners. USB has replaced parallel ports for all of these uses in modern computers, and few people will still have a need for a parallel port in contemporary computing. If your computer doesn’t have a parallel port (which is very common in modern machines), you could add one using an expansion card or a USB to parallel adapter. Parallel ports come in a standard DB-25 (containing 25 pins) cable. Other varieties of cables exist, including a DB-25 to Centronics 36-pin cable (common with printers), DB-25 to DB-25 cable (common with switchboxes), and DB-25 to DB-25 with the transmit/receive pins reversed (common for computer to computer connections for data transfer). Parallel ports are generally faster than serial ports, since they send data in parallel with eight bits at a time going over the wire. Parallel ports can be configured as output only or bidirectional ports. The ports are also configured as EPP (enhanced parallel port), ECP (enhanced capabilities port), and EPP/ECP. Under EPP, the port uses interrupt request (IRQ) and I/O addresses for fastest speeds. In ECP, the port can support daisy-chaining of devices and uses IRQ, I/O address, and DMA channels, and is considered resource hungry. EPP/ECP combines both modes into a single configuration, allowing for maximum compatibility. Parallel ports transmit data at up to two Mbps and receive data at 500 Kbps, which is very slow by today’s standards. \n Parallel port. Photo used under CC-BY license from \xa0 Ryan Franklin . \n Parallel cable. Photo used under CC-BY-ND license from \xa0 Don Lockton . \n \n 並行端口 \n \n 並行端口，也稱為LPT（行式打印機終端）端口，在1980年代和1990年代大量用於並行通信，作為輸入/輸出端口。它們通常用於打印機和掃描儀。 USB已經取代了並行端口，可用於現代計算機中的所有這些用途，當代計算機中仍然很少有人需要並行端口。如果您的計算機沒有並行端口（這在現代計算機中很常見），則可以使用擴展卡或USB到並行適配器添加一個。並行端口採用標準的DB-25（包含25針）電纜。還存在其他種類的電纜，包括DB-25至Centronics 36針電纜（與打印機共用），DB-25至DB-25電纜（與配電箱共用）以及具有發送/接收功能的DB-25至DB-25引腳顛倒（計算機到計算機的連接通常用於數據傳輸）。並行端口通常比串行端口快，因為並行端口一次通過8位並行發送數據。並行端口可以配置為僅輸出端口或雙向端口。這些端口還配置為EPP（增強型並行端口），ECP（增強功能端口）和EPP / ECP。在EPP下，端口使用中斷請求（IRQ）和I / O地址以獲得最快的速度。在ECP中，端口可以支持設備的菊花鏈連接，並使用IRQ，I / O地址和DMA通道，並且被認為是資源匱乏。 EPP / ECP將兩種模式組合為一個配置，以實現最大的兼容性。並行端口以高達2 Mbps的速率發送數據，並以500 Kbps的速率接收數據，按照當今的標準，這是非常慢的。 \n 並口。 照片由RyanFranklin根據CC-BY許可使用。 \n 平行電纜。 照片由DonLockton根據CC-BY-ND許可使用。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'UNIT 2 Hardware Basics PCH 1 The Basics.html'}, {'title': 'UNIT\xa01 Succeeding in PC Hardware', 'text': 'PC Hardware is an online course, where the content will be presented in the form of both text and activities. \n While you will have more flexibility than in a traditional course, you will also have more responsibility for your own learning. You will need to: \n Plan how to work through each unit. Determine how to use the various features of the course to help you learn. Decide when you need to seek additional support. What You Need to Know About the Course This course contains multiple modules. Each module has features designed to support you as an independent learner, including: \n Learning Objectives: These are descriptions of what you should be able to do at the end of a section. A Learning Objective will allow you to direct your learning efforts and enable you to monitor your progress as you explore the content and engage in the activities. Explanatory Content: This is the informational “meat” of every chapter. Consisting of short passages of text with information, examples, images, and explanations, this explanatory content contains pieces such as: Walk-throughs: These are videos embedded in the pages to exemplify the concepts you are exploring. They may provide a more detailed explanation of a topic or guide you through the steps of a process. Examples: Designed to illustrate specific applications of the skills and learning objectives that the course supports you to achieve. Labs: Simulations and lab activities designed to give you an opportunity to interact with various hardware elements. Many Students Wonder sidebars: These sidebars serve two purposes: (1) to give a quick review of concepts, such as "highly specialized input devices," that are used in the PC Hardware material and (2) to provide additional material or background information that you may find surprising and interesting but that is not going to be assessed in the Quiz. Learning Activities: There are different types of activities interspersed throughout the course. They include: Learn By Doing activities: Learn By Doing activities follow the short explanations and examples. These activities give you the chance to investigate and practice key ideas. Learn By Doing activities have hints and feedback to guide you if you need it. Did I Get This? activities: Did I Get This? activities are your chance to do a quick "self-check." These activities do not have hints, and often follow a Learn by Doing activity so that you can determine if you understand the key ideas. This will help you make sure you are ready for graded activities. Quizzes: These are short assignments that are graded. There is a Quiz at the end of each Module. The Quiz will show you and your instructor how well you understand the key concepts. If you read the information and do the activities in each Module, you should be ready for the Quiz. Metacognitive Activities: These activities are designed to support your development as an independent learner, encouraging you to reflect on your progress and plan for continuing success. These activities include: My Response activities: These short activities are located at the end of the module; they encourage you to reflect on your progress through the module and estimate how well you believe you\'ve attained the module\'s learning objectives. These activities also provide a place to share continuing questions and areas of difficulty (if you\'re using the course in conjunction with an instructor, your questions will be shared with your instructor). Checkpoints: These activities are located across the course after sections of content that can be particularly challenging or require additional practice. These metacognitive checkpoints encourage you to review your progress so far and assess yourself: are you ready to continue, or do you believe you need additional materials, practice, or self-assessment? If you feel that you\'re not ready to proceed, these checkpoints provide links to additional learning materials. About These Materials ©2016 Cyber Pathways Across Maryland. \n Unless otherwise specified, CPAM materials are licensed under a CreativeCommons Attribution 4.0 International License. \n This workforce solution was funded by a grant awarded by the U.S. Department of Labor’s Employment and Training Administration. The solution was created by the grantee and does not necessarily reflect the official position of the U.S. Department of Labor. The Department of Labor makes no guarantees, warrantees, or assurances of any kind, express or implied, with respect to such information, including any information on linked sites and including, but not limited to, accuracy of the information or its completeness, timeliness, usefulness, adequacy, continued availability, or ownership. \n PC Hardware是一門在線課程，其中的內容將以文本和活動的形式呈現。 \n 與傳統課程相比，您將擁有更多的靈活性，但是您也將對自己的學習承擔更多責任。您將需要： \n 計劃如何遍歷每個單元。 確定如何使用課程的各種功能來幫助您學習。 確定何時需要尋求其他支持。 您需要了解的課程內容 本課程包含多個模塊。每個模塊均具有旨在支持您作為獨立學習者的功能，包括： \n 學習目標：這些是本節末尾應該做的事情的描述。學習目標將使您能夠指導學習努力，並在探索內容和參與活動時監控自己的進度。 解釋性內容：這是每章的信息性“內容”。由說明，信息，示例，圖像和說明的簡短文本組成，此說明性內容包含以下內容： 演練：這些是嵌入在頁面中的視頻，以例證您正在探索的概念。他們可能會提供有關主題的更詳細說明，或指導您完成流程的各個步驟。 示例：旨在說明該課程支持您實現的技能和學習目標的特定應用。 實驗室：模擬和實驗室活動旨在為您提供與各種硬件元素進行交互的機會。 許多學生都想知道側邊欄：這些側邊欄有兩個目的：（1）快速回顧概念，例如PC硬件材料中使用的“高度專業化的輸入設備”，以及（2）提供其他材料或背景信息您可能會發現令人驚訝和有趣的東西，但是測驗中不會對此進行評估。 學習活動：在整個課程中散佈著不同類型的活動。它們包括： 邊幹邊學的活動：邊幹邊學的活動遵循簡短的說明和示例。這些活動使您有機會研究和實踐關鍵思想。邊做邊學活動有提示和反饋，以在需要時指導您。 我明白了嗎？活動：我明白了嗎？活動是您進行快速“自我檢查”的機會。這些活動沒有提示，通常會跟隨“做中學”活動，以便您確定自己是否了解關鍵思想。這將幫助您確保已準備好進行分級活動。 測驗：這些是評分的短期作業。每個模塊的末尾都有一個測驗。測驗將向您和您的老師展示您對關鍵概念的理解程度。如果您閱讀了該信息並在每個模塊中進行了活動，那麼您應該已經做好測驗的準備。 元認知活動：這些活動旨在支持您作為獨立學習者的發展，鼓勵您反思自己的進步併計劃繼續取得成功。這些活動包括： 我的響應活動：這些簡短的活動位於模塊的末尾；他們鼓勵您反思本單元的學習進度，並估計您認為自己達到本單元學習目標的程度。這些活動還提供了一個分享繼續存在的問題和困難領域的地方（如果您與講師一起使用本課程，您的問題將與講師分享）。 檢查點：這些活動位於課程的各個部分之後，這些部分可能特別具有挑戰性或需要其他練習。這些元認知檢查點可以鼓勵您回顧迄今為止的進展並進行自我評估：您準備好繼續嗎，還是您認為您需要其他材料，練習或自我評估？如果您感覺還沒有準備好繼續，可以使用這些檢查點來鏈接到其他學習資料。 關於這些材料 ©2016年馬里蘭州的網絡通路。 \n 除非另有說明，否則CPAM材料是根據CreativeCommons Attribution 4.0國際許可獲得許可的。 \n 該勞動力解決方案是由美國勞工部就業與培訓管理局提供的贈款資助的。該解決方案是由受讓人創建的，不一定反映美國勞工部的官方立場。勞工部不對此類信息（包括鏈接網站上的任何信息）做出任何明示或暗示的擔保，保證或保證，包括但不限於信息的準確性或其完整性，及時性，有用性，充分性，持續可用性或所有權。', 'tags': '', 'url': 'UNIT\xa01 Succeeding in PC Hardware.html'}]};